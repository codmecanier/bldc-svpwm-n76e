C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    11/14/2022 14:23:37 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BLDC_WITH_HALL
OBJECT MODULE PLACED IN .\Objects\BLDC with Hall.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE BLDC with Hall.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\BLDC with Hall.lst) TABS(2) OBJECT(.\Objects\BLDC with Hall.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "BLDC with Hall.h"
   3          #include "3PhaseInverter.h"
   4          
   5          bit BLDCReverse = 1;
   6          bit HA,HB,HC;
   7          
   8          unsigned char BLDCSpeed;
   9          
  10          void SetBLDCDirPWM(unsigned char pwm, bit dir)
  11          {
  12   1        BLDCReverse = dir;
  13   1        BLDCSpeed = pwm;
  14   1      }
  15          
  16          void UpdateHall() using 2
  17          { 
  18   1        HA = HAPort;
  19   1        HB = HBPort;
  20   1        HC = HCPort;
  21   1      }
  22          
  23          void HallGpioInit()
  24          {
  25   1        P1M1 &= 0XC7;
  26   1        P1M2 &= 0XC7; 
  27   1        TA = 0X0AA;
  28   1        TA = 0X55;
  29   1        SFRS = 1;
  30   1        P1S |= 0X18;
  31   1        TA = 0X0AA;
  32   1        TA = 0X55;
  33   1        SFRS = 0;
  34   1        HAPort = 1;
  35   1        HBPort = 1;
  36   1        HCPort = 1;
  37   1      }
  38          /*
  39          unsigned char DetermineCurrentElecCycle(bit reverse)
  40          {
  41            if(HA && !HB && HC)
  42              if(reverse)
  43                return 4;
  44              else
  45                return 1;
  46              
  47            if(HA && !HB && !HC)
  48              if(reverse)
  49                return 5;
  50              else
  51                return 2;
  52              
  53            if(HA && HB && !HC)
  54              if(reverse)
C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    11/14/2022 14:23:37 PAGE 2   

  55                return 6;
  56              else
  57                return 3;
  58              
  59            if(!HA && HB && !HC)
  60              if(reverse)
  61                return 1;
  62              else
  63                return 4;
  64              
  65            if(!HA && HB && HC)
  66              if(reverse)
  67                return 2;
  68              else
  69                return 5;
  70              
  71            if(!HA && !HB && HC)
  72              if(reverse)
  73                return 3;
  74              else
  75                return 6;
  76            return 0;
  77          }
  78          */
  79          
  80          unsigned char DetermineCurrentElecCycle(bit reverse) using 1
  81          { 
  82   1        if(HAPort)
  83   1        {
  84   2          if(HBPort)
  85   2          {
  86   3            if(HCPort)
  87   3            {
  88   4              if(reverse)
  89   4                return 5;
  90   4              else
  91   4                return 3;   
  92   4            }
  93   3            else
  94   3            {
  95   4              if(reverse)
  96   4                return 4;
  97   4              else
  98   4                return 2;
  99   4            }
 100   3          }
 101   2          else
 102   2          {
 103   3            if(HCPort)
 104   3            {
 105   4            }
 106   3            else
 107   3            {
 108   4              if(reverse)
 109   4                return 3;
 110   4              else
 111   4                return 1;
 112   4            }
 113   3          }
 114   2        }
 115   1        else
 116   1        {
C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    11/14/2022 14:23:37 PAGE 3   

 117   2          if(HBPort)
 118   2          {
 119   3            if(HCPort)
 120   3            {
 121   4              if(reverse)
 122   4                return 6;
 123   4              else
 124   4                return 4;
 125   4            }
 126   3          }
 127   2          else
 128   2          {
 129   3            if(HCPort)
 130   3            {
 131   4              if(reverse)
 132   4                return 1;
 133   4              else
 134   4                return 5;     
 135   4            }
 136   3            else
 137   3            {
 138   4              if(reverse)
 139   4                return 2;
 140   4              else
 141   4                return 6; 
 142   4            }
 143   3          }
 144   2        }
 145   1        return 0;
 146   1      }
 147          
 148          void UpdateBLDCInverter(unsigned char eleccycle) using 1
 149          {
 150   1        EA = 0;
 151   1        switch(eleccycle)
 152   1        {
 153   2          case 1: {     
 154   3            PMEN = 0X30;
 155   3            PWM0L = BLDCSpeed;
 156   3            PWM2L = 0;
 157   3            PWMCON0 |= 0X40;
 158   3            TA = 0X0AA;
 159   3            TA = 0X55;
 160   3            SFRS = 1;
 161   3            PWMINTC=0X10;
 162   3            TA = 0X0AA;
 163   3            TA = 0X55;
 164   3            SFRS = 0;
 165   3            break;
 166   3          }
 167   2          case 2: {
 168   3            PMEN = 0X0C;
 169   3            PWM0L = BLDCSpeed;
 170   3            TA = 0X0AA;
 171   3            TA = 0X55;
 172   3            SFRS = 1;
 173   3            PWM4L = 0;
 174   3            PWMINTC=0X10;
 175   3            TA = 0X0AA;
 176   3            TA = 0X55;
 177   3            SFRS = 0;
 178   3            PWMCON0 |= 0X40;
C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    11/14/2022 14:23:37 PAGE 4   

 179   3            break;
 180   3          }
 181   2          case 3: {
 182   3            PMEN = 0X03;
 183   3            PWM2L = BLDCSpeed;
 184   3            TA = 0X0AA;
 185   3            TA = 0X55;
 186   3            SFRS = 1;
 187   3            PWM4L = 0;
 188   3            PWMINTC=0X12;
 189   3            TA = 0X0AA;
 190   3            TA = 0X55;
 191   3            SFRS = 0;
 192   3            PWMCON0 |= 0X40;
 193   3            break;
 194   3          }
 195   2          case 4: {     
 196   3            PMEN = 0X30;
 197   3            PWM2L = BLDCSpeed;
 198   3            TA = 0X0AA;
 199   3            TA = 0X55;
 200   3            SFRS = 1;
 201   3            PWMINTC=0X12;
 202   3            TA = 0X0AA;
 203   3            TA = 0X55;
 204   3            SFRS = 0;
 205   3            PWM0L = 0;
 206   3            PWMCON0 |= 0X40;
 207   3            break;
 208   3          }
 209   2          case 5: {
 210   3            PMEN = 0X0C;
 211   3            TA = 0X0AA;
 212   3            TA = 0X55;
 213   3            SFRS = 1;
 214   3            PWM4L = BLDCSpeed;
 215   3            PWMINTC=0X14;
 216   3            TA = 0X0AA;
 217   3            TA = 0X55;
 218   3            SFRS = 0;
 219   3            PWM0L = 0;
 220   3            PWMCON0 |= 0X40;
 221   3            break;
 222   3          }
 223   2          case 6: {
 224   3            PMEN = 0X03;
 225   3            TA = 0X0AA;
 226   3            TA = 0X55;
 227   3            SFRS = 1;
 228   3            PWM4L = BLDCSpeed;    
 229   3            PWMINTC=0X14;
 230   3            TA = 0X0AA;
 231   3            TA = 0X55;
 232   3            SFRS = 0;
 233   3            PWM2L = 0;
 234   3            PWMCON0 |= 0X40;
 235   3            break;
 236   3          }
 237   2          case 0:
 238   2            break;
 239   2        }
 240   1        EA = 1;
C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    11/14/2022 14:23:37 PAGE 5   

 241   1      } 
 242          
 243          void BLDCTimerEventHandler() using 1
 244          { 
 245   1        UpdateBLDCInverter(DetermineCurrentElecCycle(BLDCReverse));
 246   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    395    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
