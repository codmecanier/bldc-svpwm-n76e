C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    03/16/2019 10:51:47 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BLDC_WITH_HALL
OBJECT MODULE PLACED IN .\Objects\BLDC with Hall.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE BLDC with Hall.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\BLDC with Hall.lst) TABS(2) OBJECT(.\Objects\BLDC with Hall.obj)

line level    source

   1          #include <N76E003.H>
   2          #include "BLDC with Hall.h"
   3          #include "3PhaseInverter.h"
   4          
   5          bit BLDCReverse = 1;
   6          bit HA,HB,HC;
   7          bit Hall_Mode_60deg = 1;
   8          
   9          sbit P13 = P1^3;
  10          sbit P14 = P1^4;
  11          sbit P15 = P1^5;
  12          
  13          unsigned char BLDCSpeed;
  14          unsigned char eleccycle = 0;
  15          
  16          static unsigned char BLDC_Previous_Cycle = 0;
  17          
  18          void SetBLDCDirPWM(unsigned char pwm, bit dir)
  19          {
  20   1        BLDCReverse = dir;
  21   1        BLDCSpeed = pwm;
  22   1      }
  23          
  24          void SetBLDCDirPWMU2(unsigned char pwm, bit dir) using 2
  25          {
  26   1        BLDCReverse = dir;
  27   1        BLDCSpeed = pwm;
  28   1      }
  29          
  30          
  31          void SetElecCycleU2(unsigned char i) using 2
  32          {
  33   1        eleccycle = i;
  34   1      }
  35          
  36          void SetElecCycleU3(unsigned char i) using 3
  37          {
  38   1        eleccycle = i;
  39   1      }
  40          
  41          void SetBLDCPWM(unsigned char pwm) using 2
  42          {
  43   1        BLDCSpeed = pwm;
  44   1      }
  45          
  46          bit GetBLDCDirection()
  47          {return BLDCReverse;}
  48          
  49          unsigned char GetBLDCDirectionU3() using 3
  50          {return BLDCReverse;}
  51          
  52          void UpdateHall() using 2
  53          { 
  54   1        HA = HAPort;
C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    03/16/2019 10:51:47 PAGE 2   

  55   1        HB = HBPort;
  56   1        HC = HCPort;
  57   1      }
  58          
  59          void HallGpioInit()
  60          {
  61   1        P1M1 &= 0XC7;
  62   1        P1M2 &= 0XC7; 
  63   1        TA = 0X0AA;
  64   1        TA = 0X55;
  65   1        SFRS = 1;
  66   1        P1S |= 0X18;
  67   1        TA = 0X0AA;
  68   1        TA = 0X55;
  69   1        SFRS = 0;
  70   1        HAPort = 1;
  71   1        HBPort = 1;
  72   1        HCPort = 1;
  73   1      }
  74          
  75          unsigned char DetermineCurrentElecCycle(bit reverse) using 3
  76          { 
  77   1        if(HAPort)
  78   1        {
  79   2          if(Hall_Mode_60deg ^ HBPort)
  80   2          {
  81   3            if(HCPort)
  82   3            {
  83   4              if(reverse)
  84   4                return 5;
  85   4              else
  86   4                return 3;   
  87   4            }
  88   3            else
  89   3            {
  90   4              if(reverse)
  91   4                return 4;
  92   4              else
  93   4                return 2;
  94   4            }
  95   3          }
  96   2          else
  97   2          {
  98   3            if(HCPort)
  99   3            {
 100   4              return 0;   //error
 101   4            }
 102   3            else
 103   3            {
 104   4              if(reverse)
 105   4                return 3;
 106   4              else
 107   4                return 1;
 108   4            }
 109   3          }
 110   2        }
 111   1        else
 112   1        {
 113   2          if(Hall_Mode_60deg ^ HBPort)
 114   2          {
 115   3            if(HCPort)
 116   3            {
C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    03/16/2019 10:51:47 PAGE 3   

 117   4              if(reverse)
 118   4                return 6;
 119   4              else
 120   4                return 4;
 121   4            }
 122   3            else
 123   3            {
 124   4              return 0; //error
 125   4            }
 126   3          }
 127   2          else
 128   2          {
 129   3            if(HCPort)
 130   3            {
 131   4              if(reverse)
 132   4                return 1;
 133   4              else
 134   4                return 5;     
 135   4            }
 136   3            else
 137   3            {
 138   4              if(reverse)
 139   4                return 2;
 140   4              else
 141   4                return 6; 
 142   4            }
 143   3          }
 144   2        }
 145   1        return 0;
 146   1      }
 147          
 148          void UpdateBLDCInverter() using 1
 149          {
 150   1        if(BLDC_Previous_Cycle!= eleccycle)
 151   1        {
 152   2          EA = 0;
 153   2          switch(eleccycle)
 154   2          {
 155   3            case 1: {     
 156   4              PMEN = 0X30;
 157   4              PWM0L = BLDCSpeed;
 158   4              PWM2L = 0;
 159   4              PWMCON0 |= 0X40;
 160   4              TA = 0X0AA;
 161   4              TA = 0X55;
 162   4              SFRS = 1;
 163   4              PWMINTC=0X10;
 164   4              TA = 0X0AA;
 165   4              TA = 0X55;
 166   4              SFRS = 0;
 167   4              break;
 168   4            }
 169   3            case 2: {
 170   4              PMEN = 0X0C;
 171   4              PWM0L = BLDCSpeed;
 172   4              TA = 0X0AA;
 173   4              TA = 0X55;
 174   4              SFRS = 1;
 175   4              PWM4L = 0;
 176   4              PWMINTC=0X10;
 177   4              TA = 0X0AA;
 178   4              TA = 0X55;
C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    03/16/2019 10:51:47 PAGE 4   

 179   4              SFRS = 0;
 180   4              PWMCON0 |= 0X40;
 181   4              break;
 182   4            }
 183   3            case 3: {
 184   4              PMEN = 0X03;
 185   4              PWM2L = BLDCSpeed;
 186   4              TA = 0X0AA;
 187   4              TA = 0X55;
 188   4              SFRS = 1;
 189   4              PWM4L = 0;
 190   4              PWMINTC=0X12;
 191   4              TA = 0X0AA;
 192   4              TA = 0X55;
 193   4              SFRS = 0;
 194   4              PWMCON0 |= 0X40;
 195   4              break;
 196   4            }
 197   3            case 4: {     
 198   4              PMEN = 0X30;
 199   4              PWM2L = BLDCSpeed;
 200   4              TA = 0X0AA;
 201   4              TA = 0X55;
 202   4              SFRS = 1;
 203   4              PWMINTC=0X12;
 204   4              TA = 0X0AA;
 205   4              TA = 0X55;
 206   4              SFRS = 0;
 207   4              PWM0L = 0;
 208   4              PWMCON0 |= 0X40;
 209   4              break;
 210   4            }
 211   3            case 5: {
 212   4              PMEN = 0X0C;
 213   4              TA = 0X0AA;
 214   4              TA = 0X55;
 215   4              SFRS = 1;
 216   4              PWM4L = BLDCSpeed;
 217   4              PWMINTC=0X14;
 218   4              TA = 0X0AA;
 219   4              TA = 0X55;
 220   4              SFRS = 0;
 221   4              PWM0L = 0;
 222   4              PWMCON0 |= 0X40;
 223   4              break;
 224   4            }
 225   3            case 6: {
 226   4              PMEN = 0X03;
 227   4              TA = 0X0AA;
 228   4              TA = 0X55;
 229   4              SFRS = 1;
 230   4              PWM4L = BLDCSpeed;    
 231   4              PWMINTC=0X14;
 232   4              TA = 0X0AA;
 233   4              TA = 0X55;
 234   4              SFRS = 0;
 235   4              PWM2L = 0;
 236   4              PWMCON0 |= 0X40;
 237   4              break;
 238   4            }
 239   3            case 0:
 240   3              break;
C51 COMPILER V9.59.0.0   BLDC_WITH_HALL                                                    03/16/2019 10:51:47 PAGE 5   

 241   3          }
 242   2          
 243   2          EA = 1;
 244   2          BLDC_Previous_Cycle= eleccycle;
 245   2        }
 246   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    440    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
